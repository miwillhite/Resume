%section
  %h2 Project Name: Stella
  %p Stella is a Rails based Electronic Medical Records software product. It is deployed in doctor's offices around the country. This is the first web-based version (v8.0) of the product. Below, I have highlighted some of my more significant contributions to the project.


%section 
  %h2 EditableSet
  %p This jQuery edit-in-place plugin was created for the Patient&rsquo;s Screen. By simply double clicking the appropriate fieldset authorized users could easily update critical information.
  %p 
    %a{ :href => "http://editable-set.heroku.com" } http://editable-set.heroku.com 
    | 
    %a{ :href => "http://github.com/miwillhite/editable-set" } http://github.com/miwillhite/editable-set

%section 
  %h2 Redesign
  %p 
    I came into this project eight months ago after it had already been started. There were remnants of several designs past. As our product was reaching beta, it still looked very alpha. When the time was right, I took the initiative to redesign the entire application. I developed a library of our key components and created a styleguide for my peers to follow. 
  %p.container  
    %img{ :src => "/images/search_mockup.png", :alt => "Search page redesign mockup", :class => "screencap" }
    %img{ :src => "/images/search_original.png", :alt => "Search page original design", :class => "screencap" }
    %img{ :src => "/images/search_current.png", :alt => "Search page initial implementation", :class => "screencap" }
    %img{ :src => "/images/encounter_mockup.png", :alt => "Encounter page redesign mockup", :class => "screencap" }
    %img{ :src => "/images/encounter_original.png", :alt => "Encounter page original design", :class => "screencap" }
    %img{ :src => "/images/encounter_current.png", :alt => "Encounter page initial implementation", :class => "screencap" }
    %img{ :src => "/images/patient_mockup.png", :alt => "Patient page redesign mockup", :class => "screencap" }
    %img{ :src => "/images/patient_original.png", :alt => "Patient page original design", :class => "screencap" }
    %img{ :src => "/images/patient_current.png", :alt => "Patient page initial implementation", :class => "screencap" }
    %i.image_caption Search page redesign mockup
    
  %p
    %a.previous{ :href => '#' } Previous
    %a.next{ :href => '#' } Next
    

%section 
  %h2 HTML Interface
  %p Because the project changed directions and focus often, the design had to be flexible and easily maintainable. I applied this idea to the HTML and CSS as well. We had initially developed the application with a fluid version of the 960 grid system. My redesign was inspired by desktop applications and required both fluid (horizontal &amp; vertical) and fluid/fixed layouts. 960 was unable to accomodate this, so I created a new grid system that would be flexible enough to handle each of our different layouts and be simple enough that anyone could glance quickly at a page to understand it. The new layout &ldquo;API&rdquo; was designed with a future migration to HTML5 in mind, and uses minimal/semantic markup&hellip;eliminating cruft like <code>.grid_4.alpha.prefix_4</code>.
  %h5 Before:
  :preserve
    <pre><code>
      // Require a partial to setup navigation and "action" links
      
      = render :partial => 'home/header'
    
      #primary_content.grid_8.alpha
        // Content goes here

      #secondary_content.grid_4.omega
        // And here
        
    </code></pre>
      
  %h5 After:
  :preserve
    <pre><code>
      // The "Header", or Navigation, is now handled in the controller
      // We do still need to add our "action" links, but rather than a partial,
      // content_for is used. This is more transparent, more legible.
      
      - content_for :actions do
        = link_to "New Patient", new_patient_path
      
      .fixed.first
        .aside
          // Content goes here

      .fluid.last
        .section
          // And here
        
    </code></pre>
    
%section 
  %h2 Style Organization
  %p 
    Inspired by Nicole Sullivan&rsquo;s OOCSS framework, I designed a stylesheet architecture that relies heavily on the dom. The idea was to create a set of widgets/styles that would &ldquo;know how to act&rdquo; depending on their environment. This meant that we weren&rsquo;t adding extra styles everytime we added a feature, rather we follow a simple guideline and use the html to style our components. Phase one of this strategy effectively reduced a single 1200 line stylesheet to a small set of stylesheets totaling less than 800 lines of code. 
  %h5 New Style Organization
  :preserve
    <pre><code>
      sass/
        application.sass      // For application specific styles
        reset.sass            // A basic reset
        colors.sass           // Color definitions
        mixins.sass           // Clearfix, inlineblock, etc.
        content.sass          // Content, meaning non-structural
        grid.sass             // Styles the grid
        module.sass           // Components or modules
        ...
        // Content, Grid, and Module all have corresponding 'skins' sass files
        // The skins set purely aesthetic properties like color, borders, shadows, etc.

    </code></pre>

%section 
  %h2 Navigation System
  %p With the redesign came an opportunity to also rework our navigation system. Previously, we had navigational items strewn throughout the view code, sometimes hidden in partials, with no established format. I created a couple of view helpers and controller methods that would generate different levels of navigation with different purposes. We now have primary and secondary navigations as well as an &ldquo;action bar&rdquo; where we can put things that affect the current working document. I developed a simple interface so that the navigational elements are declared in the controller class wide, or overriden on the action level if needed.
  
  %h5 Summarized Controller:
  :preserve
    <pre><code>
      class HomeController < ApplicationController
      
        # We can set set the selected tabs
        def index # aka 'Search'
          @selected_tabs = { :primary => 'Search', :secondary => 'Results' }
          ...
        end
        
        # And override the secondary and/or primary navigation
        def active
          @selected_tabs = { :primary => 'Active', :secondary => 'Today' }
          @navigation[:secondary] = [ ["Today", active_path] ]
          ...
        end

        protected
        
          # This is called as a before filter from the application.rb
          # We create :primary and :secondary navigations by passing
          # the link title and path, it's also possible to pass in the class
          # attribute for individual links, or the entire nav element.
          
          def set_navigation
            @navigation = { 
              :primary   => [ ["Search", root_path], 
                              ["Active", active_path],
                              ["Appointments", appointments_path] ],
              :secondary => [ ["Results", root_path] ] 
            }
          end

      end
        
    </code></pre>

  
%section 
  %h2 Javascript Testing
  %p We are currently using Cucumber/Rspec to test our app. However, many of our views are Javascript driven. I have invested a lot of time researching and experimenting with different testing techniques and technologies (Capybara w/Celerity, Watir-webdriver, Jasmine, QUnit, etc.), but nothing can seem to handle the level of complexity that we need in our functional Javascript tests. I have decided that Javascript needs to be tested by Javascript, the &ldquo;fakers&rdquo; just don&rsquo;t quite cut it. Frustrated by my findings, I have been trying to develop a new system that ties Cucumber and Jasmine together. Results pending.