%section
  %h2 Project Name: Stella
  %p <b>Stella is a Rails based Electronic Medical Records software product.</b> It is deployed in doctors&rsquo; offices around the country. This is the first web-based version (v8.0) of the product. Below, I have highlighted a few of my more significant contributions to the project.


%section 
  %h2 EditableSet
  %p This jQuery edit-in-place plugin was created for the Patient&rsquo;s Screen. <b>By simply double-clicking the appropriate fieldset authorized users can easily update critical information.</b>
  %p 
    %a{ :href => "http://editable-set.heroku.com" } http://editable-set.heroku.com 
    | 
    %a{ :href => "http://github.com/miwillhite/editable-set" } http://github.com/miwillhite/editable-set

%section 
  %h2 Redesign
  %p 
    I came into this project eight months ago after it had already been started. As our product reached beta, it still looked very alpha. <b>When the time was right, I took the initiative to redesign the entire application.</b> I developed a library of our key components and posted a style-usage guide on our Google Wave for my team to follow. 
  %h5 Before
  %p  
    %img{ :src => "/images/search_original.png", :alt => "Search page original design", :class => "screencap" }
  %h5 After
  %p
    %img{ :src => "/images/search_current.png", :alt => "Search page redesign, initial implementation", :class => "screencap" }
    

%section 
  %h2 HTML Interface
  %p Because the project changed directions and focus often, the design had to be flexible and easily maintained. I applied this concept to the XHTML and CSS as well. <b>I created a new grid system that would be flexible enough to handle each of our different layouts</b> (present and future) and be simple enough for anyone to quickly scan the source to understand it. The new layout &ldquo;API&rdquo; was designed with HTML5 in mind, and uses minimal, semantic markup&hellip;eliminating cruft like our former <code>.grid_4.alpha.prefix_4</code>.
  %h5 Before
  :preserve
    <pre><code>
      // Require a partial to setup navigation and "action" links
      
      = render :partial => 'home/header'
    
      #primary_content.grid_8.alpha
        // Content goes here

      #secondary_content.grid_4.omega
        // And here
        
    </code></pre>
      
  %h5 After
  :preserve
    <pre><code>
      // The "Header", or Navigation, is now handled in the controller
      // We do still need to add our "action" links, but rather than a partial,
      // content_for is used. This is more transparent, more legible.
      
      - content_for :actions do
        = link_to "New Patient", new_patient_path
      
      .fixed.first
        .aside
          // Content goes here

      .fluid.last
        .section
          // And here
        
    </code></pre>
    
%section 
  %h2 Style Organization
  %p 
    Inspired by Nicole Sullivan&rsquo;s OOCSS framework, I designed a stylesheet architecture that relies heavily on the dom. I created a set of widgets/styles that &ldquo;know how to act&rdquo; depending on their environment. Developers no longer have to add extra styles everytime a feature is added, rather we can now follow a simple guideline and use the markup to style our components. Phase one of this strategy effectively <b>reduced a single 1,200 line stylesheet</b> to a small set of stylesheets totaling <b>less than 800 lines of code</b>. 
  %h5 New Style Organization
  :preserve
    <pre><code>
      sass/
        application.sass      // For application specific styles
        reset.sass            // A basic reset
        colors.sass           // Color definitions
        mixins.sass           // Clearfix, inlineblock, etc.
        content.sass          // Content, meaning non-structural
        grid.sass             // Styles the grid
        module.sass           // Components or modules
        ...
        
        // Content, Grid, and Module all have corresponding 'skins' sass files
        // The skins set purely aesthetic properties like color, borders, shadows, etc.

    </code></pre>

%section 
  %h2 Navigation System
  %p With the redesign came an opportunity to also rework our navigation system. Previously, we had navigational items strewn throughout the view code, sometimes hidden in partials, with no established format. <b>I created a couple of view helpers and controller methods that would generate different levels of navigation with different purposes.</b> We now have primary and secondary navigations as well as an &ldquo;action bar&rdquo; where we can put things that affect the current working document. I developed a simple interface so that the navigational elements are declared in the controller class wide, or overriden on the action level if needed.
  
  %h5 Summarized Controller
  :preserve
    <pre><code>
      class HomeController < ApplicationController
      
        # This is called as a before filter from the ApplicationController
        # We create :primary and :secondary navigations by passing
        # the link title and path, it's also possible to pass in the class
        # attribute for individual links, or the entire navigation element.
        
        def set_navigation
          @navigation = { 
            :primary   => [ ["Search", root_path], 
                            ["Active", active_path],
                            ["Appointments", appointments_path] ],
            :secondary => [ ["Results", root_path] ] 
          }
        end
        protected :set_navigation
      
        # We can set set the selected tabs
        def index # aka 'Search'
          @selected_tabs = { :primary => 'Search', :secondary => 'Results' }
          ...
        end
        
        # And override the secondary and/or primary navigation
        def active
          @selected_tabs = { :primary => 'Active', :secondary => 'Today' }
          @navigation[:secondary] = [ ["Today", active_path] ]
          ...
        end        

      end
        
    </code></pre>

  
%section 
  %h2 JavaScript Testing
  %p We are currently using Cucumber/Rspec to test our app. However, many of our views are JavaScript driven. I have invested a lot of time researching and experimenting with different testing techniques and technologies (Capybara w/Celerity, Watir-webdriver, Jasmine, QUnit, etc.), but nothing can seem to handle the level of complexity that we need in our functional JavaScript tests. I have decided that JavaScript needs to be tested by JavaScript, the &ldquo;fakers&rdquo; just don&rsquo;t cut it. Frustrated by my findings, <b>I have been working to develop a new system that ties Cucumber and Jasmine together</b>. Results pending.